syntax = "proto3";

package grpcmodule;

option go_package = "./";

service CoinmecaGrpcModule {
  rpc AddData (GeneralRequest) returns (GeneralResponse) {}
}

message GeneralRequest {
  oneof request {
    TransactionRequest transaction = 1;
    VaultRecentRequest vaultRecent = 2;
    VaultInfoRequest vaultInfo =3;
    ExchangeRateRequest exchangeRateRequest=4;
    MarketRecentRequest marketRecent = 5;
    MarketOrderbookRequest marketOrderbook = 6;
    VaultLockValueRequest vaultLockValue=7;
  }
}

message GeneralResponse {
  bool success = 1;
}

// ====================================
// AddTransaction
// ====================================
message TransactionRequest {
  Transaction data = 1;
}

message Transaction {
  string Id = 1;
  string BlockHash = 2;
  string BlockNumber = 3;
  string Hash = 4;
  repeated string AccessList = 5;
  string ChainId = 6;
  string From = 7;
  string To = 8;
  string Gas = 9;
  string GasPrice = 10;
  string Input = 11;
  string Cate = 12;
}

message TransactionResponse {
  bool success = 1;
}

// ====================================
// Vault
// ====================================
message VaultRecentRequest {
  VaultRecent data = 1;
}

message VaultRecent {
  int64 chainId=1;
  string token=2;
  string user=3;
  VaultTradeType type =4;
  string time =5;
  double amount =6;
  double meca=7;
  double share=8;
  string txHash=9;
  string updateAt=10;
}

message VaultRecentResponse {
  bool success = 1;
}

enum VaultTradeType {
  DEPOSIT=0;
  WITHDRAW=1;
}

message VaultInfoRequest {
  VaultInfo data = 1;
}

message VaultInfo{
  int64 chainId=1;
  string address=2;
  int64 decimals=3;
  string exchange=4;
  bool key=5;
  string locked=6;
  string name=7;
  string need=8;
  string rate=9;
  string symbol=10;
  string weight=11;
}

message ExchangeRateRequest {
  ExchangeRate data = 1;
}

message ExchangeRate{
  int64 chainId=1;
  repeated AddressUsdPriceSet userPrices=2;
}

message AddressUsdPriceSet{
  string address = 1;
  double userPrice = 2;
}

// Vault LockValue
message VaultLockValueRequest {
  VaultLockValue data = 1;
}

message VaultLockValue {
  string symbol=1;
  string address=2;
  int64 time=3;
  string weight=4;
  string locked =5;
  string value=6;
  string lockedValue=7;
}


// ====================================
// Market
// ====================================
enum MarketTradeType {
  Buy=0;
  Sell=1;
  Bid=2;
  Ask=3;
}

message Tick {
  string price=1;
  string balance=2;
}

message MarketOrderbook {
  repeated Tick asks=1;
  repeated Tick bids=2;
}

message MarketOrderbookRequest {
  MarketOrderbook data = 1;
}

message MarketVolume{
  string base=1;
  string quote=2;
}

message MarketInfo {
  int64 chainId=1;
  string address=2;
  string base=3;
  string quote=4;
  string price =5;
  string tick =6;
  string fee=7;
  string threshold=8;
  string lock=9;
  string updateAt=10;
}

message MarketRecentRequest {
  MarketRecent data = 1;
}

message MarketRecent {
  int64 chainId=1;
  string user=2;
  string market=3;
  MarketTradeType type =4;
  string time =5;
  double price =6;
  double amount=7;
  double quantity=8;
  string txHash=9;
  string updateAt=10;
}

// ====================================
// Farm
// ====================================
message FarmRecentRequest {
  FarmRecent data = 1;
}

message FarmRecent {
  int64 chainId=1;
  string farm=2;
  string user=3;
  FarmTradeType type =4;
  string time =5;
  double value=6;
  double share=7;
  string txHash=8;
  string updateAt=9;
}

message FarmRecentResponse {
  bool success = 1;
}

enum FarmTradeType {
  STAKING=0;
  UNSTAKE=1;
}

message FarmInfoRequest {
  FarmInfo data = 1;
}

message FarmInfo{
  int64 chainId=1;
  int64 id=2;
  string address=3;
  string master=4;
  string name=5;
  string stake=6;
  string earn=7;
  string start=8;
  string period=9;
  string duration=10;
  string goal=11;
  string locked=12;
  string rewards=13;
  string total=14;
}
