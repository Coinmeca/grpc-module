// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: coinmeca_grpc.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeVolumeType int32

const (
	ExchangeVolumeType_BUY  ExchangeVolumeType = 0
	ExchangeVolumeType_SELL ExchangeVolumeType = 1
)

// Enum value maps for ExchangeVolumeType.
var (
	ExchangeVolumeType_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	ExchangeVolumeType_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x ExchangeVolumeType) Enum() *ExchangeVolumeType {
	p := new(ExchangeVolumeType)
	*p = x
	return p
}

func (x ExchangeVolumeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeVolumeType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinmeca_grpc_proto_enumTypes[0].Descriptor()
}

func (ExchangeVolumeType) Type() protoreflect.EnumType {
	return &file_coinmeca_grpc_proto_enumTypes[0]
}

func (x ExchangeVolumeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeVolumeType.Descriptor instead.
func (ExchangeVolumeType) EnumDescriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{0}
}

type VaultVolumeType int32

const (
	VaultVolumeType_DEPOSIT  VaultVolumeType = 0
	VaultVolumeType_WITHDRAW VaultVolumeType = 1
)

// Enum value maps for VaultVolumeType.
var (
	VaultVolumeType_name = map[int32]string{
		0: "DEPOSIT",
		1: "WITHDRAW",
	}
	VaultVolumeType_value = map[string]int32{
		"DEPOSIT":  0,
		"WITHDRAW": 1,
	}
)

func (x VaultVolumeType) Enum() *VaultVolumeType {
	p := new(VaultVolumeType)
	*p = x
	return p
}

func (x VaultVolumeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VaultVolumeType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinmeca_grpc_proto_enumTypes[1].Descriptor()
}

func (VaultVolumeType) Type() protoreflect.EnumType {
	return &file_coinmeca_grpc_proto_enumTypes[1]
}

func (x VaultVolumeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VaultVolumeType.Descriptor instead.
func (VaultVolumeType) EnumDescriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{1}
}

type GeneralRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*GeneralRequest_Transaction
	//	*GeneralRequest_Farm
	//	*GeneralRequest_Exchange
	//	*GeneralRequest_Vault
	Request isGeneralRequest_Request `protobuf_oneof:"request"`
}

func (x *GeneralRequest) Reset() {
	*x = GeneralRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralRequest) ProtoMessage() {}

func (x *GeneralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralRequest.ProtoReflect.Descriptor instead.
func (*GeneralRequest) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{0}
}

func (m *GeneralRequest) GetRequest() isGeneralRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *GeneralRequest) GetTransaction() *TransactionRequest {
	if x, ok := x.GetRequest().(*GeneralRequest_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (x *GeneralRequest) GetFarm() *FarmRequest {
	if x, ok := x.GetRequest().(*GeneralRequest_Farm); ok {
		return x.Farm
	}
	return nil
}

func (x *GeneralRequest) GetExchange() *ExchangeRequest {
	if x, ok := x.GetRequest().(*GeneralRequest_Exchange); ok {
		return x.Exchange
	}
	return nil
}

func (x *GeneralRequest) GetVault() *VaultRequest {
	if x, ok := x.GetRequest().(*GeneralRequest_Vault); ok {
		return x.Vault
	}
	return nil
}

type isGeneralRequest_Request interface {
	isGeneralRequest_Request()
}

type GeneralRequest_Transaction struct {
	Transaction *TransactionRequest `protobuf:"bytes,1,opt,name=transaction,proto3,oneof"`
}

type GeneralRequest_Farm struct {
	Farm *FarmRequest `protobuf:"bytes,2,opt,name=farm,proto3,oneof"`
}

type GeneralRequest_Exchange struct {
	Exchange *ExchangeRequest `protobuf:"bytes,3,opt,name=exchange,proto3,oneof"`
}

type GeneralRequest_Vault struct {
	Vault *VaultRequest `protobuf:"bytes,4,opt,name=vault,proto3,oneof"`
}

func (*GeneralRequest_Transaction) isGeneralRequest_Request() {}

func (*GeneralRequest_Farm) isGeneralRequest_Request() {}

func (*GeneralRequest_Exchange) isGeneralRequest_Request() {}

func (*GeneralRequest_Vault) isGeneralRequest_Request() {}

type GeneralResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GeneralResponse) Reset() {
	*x = GeneralResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralResponse) ProtoMessage() {}

func (x *GeneralResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralResponse.ProtoReflect.Descriptor instead.
func (*GeneralResponse) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// ====================================
// AddTransaction
// ====================================
type TransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Transaction `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TransactionRequest) Reset() {
	*x = TransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequest) ProtoMessage() {}

func (x *TransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequest.ProtoReflect.Descriptor instead.
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionRequest) GetData() *Transaction {
	if x != nil {
		return x.Data
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	BlockHash   string   `protobuf:"bytes,2,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	BlockNumber string   `protobuf:"bytes,3,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Hash        string   `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	AccessList  []string `protobuf:"bytes,5,rep,name=AccessList,proto3" json:"AccessList,omitempty"`
	ChainId     string   `protobuf:"bytes,6,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
	From        string   `protobuf:"bytes,7,opt,name=From,proto3" json:"From,omitempty"`
	To          string   `protobuf:"bytes,8,opt,name=To,proto3" json:"To,omitempty"`
	Gas         string   `protobuf:"bytes,9,opt,name=Gas,proto3" json:"Gas,omitempty"`
	GasPrice    string   `protobuf:"bytes,10,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	Input       string   `protobuf:"bytes,11,opt,name=Input,proto3" json:"Input,omitempty"`
	Cate        string   `protobuf:"bytes,12,opt,name=Cate,proto3" json:"Cate,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Transaction) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *Transaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Transaction) GetAccessList() []string {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *Transaction) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Transaction) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transaction) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transaction) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

func (x *Transaction) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *Transaction) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *Transaction) GetCate() string {
	if x != nil {
		return x.Cate
	}
	return ""
}

type TransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TransactionResponse) Reset() {
	*x = TransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResponse) ProtoMessage() {}

func (x *TransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResponse.ProtoReflect.Descriptor instead.
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// ====================================
// AddFarm
// ====================================
type FarmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Farm `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FarmRequest) Reset() {
	*x = FarmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmRequest) ProtoMessage() {}

func (x *FarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmRequest.ProtoReflect.Descriptor instead.
func (*FarmRequest) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *FarmRequest) GetData() *Farm {
	if x != nil {
		return x.Data
	}
	return nil
}

type Farm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId int64       `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Main    []*FarmData `protobuf:"bytes,2,rep,name=main,proto3" json:"main,omitempty"`
	Derive  []*FarmData `protobuf:"bytes,3,rep,name=derive,proto3" json:"derive,omitempty"`
}

func (x *Farm) Reset() {
	*x = Farm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Farm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Farm) ProtoMessage() {}

func (x *Farm) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Farm.ProtoReflect.Descriptor instead.
func (*Farm) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *Farm) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Farm) GetMain() []*FarmData {
	if x != nil {
		return x.Main
	}
	return nil
}

func (x *Farm) GetDerive() []*FarmData {
	if x != nil {
		return x.Derive
	}
	return nil
}

type FarmData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address             string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TotalStaking        float64    `protobuf:"fixed64,2,opt,name=total_staking,json=totalStaking,proto3" json:"total_staking,omitempty"`
	TotalStakingChange  float64    `protobuf:"fixed64,3,opt,name=total_staking_change,json=totalStakingChange,proto3" json:"total_staking_change,omitempty"`
	Tvl                 float64    `protobuf:"fixed64,4,opt,name=tvl,proto3" json:"tvl,omitempty"`
	TvlChange           float64    `protobuf:"fixed64,5,opt,name=tvl_change,json=tvlChange,proto3" json:"tvl_change,omitempty"`
	TotalInterest       float64    `protobuf:"fixed64,6,opt,name=total_interest,json=totalInterest,proto3" json:"total_interest,omitempty"`
	TotalInterestChange float64    `protobuf:"fixed64,7,opt,name=total_interest_change,json=totalInterestChange,proto3" json:"total_interest_change,omitempty"`
	Staking_24H         float64    `protobuf:"fixed64,8,opt,name=staking_24h,json=staking24h,proto3" json:"staking_24h,omitempty"`
	Staking_24HChange   float64    `protobuf:"fixed64,9,opt,name=staking_24h_change,json=staking24hChange,proto3" json:"staking_24h_change,omitempty"`
	Unstaking_24H       float64    `protobuf:"fixed64,10,opt,name=unstaking_24h,json=unstaking24h,proto3" json:"unstaking_24h,omitempty"`
	Unstaking_24HChange float64    `protobuf:"fixed64,11,opt,name=unstaking_24h_change,json=unstaking24hChange,proto3" json:"unstaking_24h_change,omitempty"`
	Interest_24H        float64    `protobuf:"fixed64,12,opt,name=interest_24h,json=interest24h,proto3" json:"interest_24h,omitempty"`
	InterestChange_24H  float64    `protobuf:"fixed64,13,opt,name=interest_change_24h,json=interestChange24h,proto3" json:"interest_change_24h,omitempty"`
	Roi                 float64    `protobuf:"fixed64,14,opt,name=roi,proto3" json:"roi,omitempty"`
	Ror                 float64    `protobuf:"fixed64,15,opt,name=ror,proto3" json:"ror,omitempty"`
	Staking             float64    `protobuf:"fixed64,16,opt,name=staking,proto3" json:"staking,omitempty"`
	Claimable           float64    `protobuf:"fixed64,17,opt,name=claimable,proto3" json:"claimable,omitempty"`
	Chart               *FarmChart `protobuf:"bytes,18,opt,name=chart,proto3" json:"chart,omitempty"`
}

func (x *FarmData) Reset() {
	*x = FarmData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmData) ProtoMessage() {}

func (x *FarmData) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmData.ProtoReflect.Descriptor instead.
func (*FarmData) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *FarmData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FarmData) GetTotalStaking() float64 {
	if x != nil {
		return x.TotalStaking
	}
	return 0
}

func (x *FarmData) GetTotalStakingChange() float64 {
	if x != nil {
		return x.TotalStakingChange
	}
	return 0
}

func (x *FarmData) GetTvl() float64 {
	if x != nil {
		return x.Tvl
	}
	return 0
}

func (x *FarmData) GetTvlChange() float64 {
	if x != nil {
		return x.TvlChange
	}
	return 0
}

func (x *FarmData) GetTotalInterest() float64 {
	if x != nil {
		return x.TotalInterest
	}
	return 0
}

func (x *FarmData) GetTotalInterestChange() float64 {
	if x != nil {
		return x.TotalInterestChange
	}
	return 0
}

func (x *FarmData) GetStaking_24H() float64 {
	if x != nil {
		return x.Staking_24H
	}
	return 0
}

func (x *FarmData) GetStaking_24HChange() float64 {
	if x != nil {
		return x.Staking_24HChange
	}
	return 0
}

func (x *FarmData) GetUnstaking_24H() float64 {
	if x != nil {
		return x.Unstaking_24H
	}
	return 0
}

func (x *FarmData) GetUnstaking_24HChange() float64 {
	if x != nil {
		return x.Unstaking_24HChange
	}
	return 0
}

func (x *FarmData) GetInterest_24H() float64 {
	if x != nil {
		return x.Interest_24H
	}
	return 0
}

func (x *FarmData) GetInterestChange_24H() float64 {
	if x != nil {
		return x.InterestChange_24H
	}
	return 0
}

func (x *FarmData) GetRoi() float64 {
	if x != nil {
		return x.Roi
	}
	return 0
}

func (x *FarmData) GetRor() float64 {
	if x != nil {
		return x.Ror
	}
	return 0
}

func (x *FarmData) GetStaking() float64 {
	if x != nil {
		return x.Staking
	}
	return 0
}

func (x *FarmData) GetClaimable() float64 {
	if x != nil {
		return x.Claimable
	}
	return 0
}

func (x *FarmData) GetChart() *FarmChart {
	if x != nil {
		return x.Chart
	}
	return nil
}

type FarmChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apr    []*FarmChartAPR    `protobuf:"bytes,1,rep,name=apr,proto3" json:"apr,omitempty"`
	Locked []*FarmChartLocked `protobuf:"bytes,2,rep,name=locked,proto3" json:"locked,omitempty"`
}

func (x *FarmChart) Reset() {
	*x = FarmChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmChart) ProtoMessage() {}

func (x *FarmChart) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmChart.ProtoReflect.Descriptor instead.
func (*FarmChart) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{8}
}

func (x *FarmChart) GetApr() []*FarmChartAPR {
	if x != nil {
		return x.Apr
	}
	return nil
}

func (x *FarmChart) GetLocked() []*FarmChartLocked {
	if x != nil {
		return x.Locked
	}
	return nil
}

type FarmChartAPR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  string  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FarmChartAPR) Reset() {
	*x = FarmChartAPR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmChartAPR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmChartAPR) ProtoMessage() {}

func (x *FarmChartAPR) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmChartAPR.ProtoReflect.Descriptor instead.
func (*FarmChartAPR) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{9}
}

func (x *FarmChartAPR) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *FarmChartAPR) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FarmChartLocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  string  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FarmChartLocked) Reset() {
	*x = FarmChartLocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmChartLocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmChartLocked) ProtoMessage() {}

func (x *FarmChartLocked) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmChartLocked.ProtoReflect.Descriptor instead.
func (*FarmChartLocked) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{10}
}

func (x *FarmChartLocked) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *FarmChartLocked) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FarmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *FarmResponse) Reset() {
	*x = FarmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmResponse) ProtoMessage() {}

func (x *FarmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmResponse.ProtoReflect.Descriptor instead.
func (*FarmResponse) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{11}
}

func (x *FarmResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// ====================================
// AddExchange
// ====================================
type ExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Exhchange `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExchangeRequest) Reset() {
	*x = ExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRequest) ProtoMessage() {}

func (x *ExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRequest.ProtoReflect.Descriptor instead.
func (*ExchangeRequest) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{12}
}

func (x *ExchangeRequest) GetData() *Exhchange {
	if x != nil {
		return x.Data
	}
	return nil
}

type Exhchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId int64   `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Market  *Market `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *Exhchange) Reset() {
	*x = Exhchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exhchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exhchange) ProtoMessage() {}

func (x *Exhchange) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exhchange.ProtoReflect.Descriptor instead.
func (*Exhchange) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{13}
}

func (x *Exhchange) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Exhchange) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Base          string          `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	Quote         string          `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`
	Name          string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Symbol        string          `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price         float64         `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Change        float64         `protobuf:"fixed64,7,opt,name=change,proto3" json:"change,omitempty"`
	ChangeRate    float64         `protobuf:"fixed64,8,opt,name=change_rate,json=changeRate,proto3" json:"change_rate,omitempty"`
	High          float64         `protobuf:"fixed64,9,opt,name=high,proto3" json:"high,omitempty"`
	Low           float64         `protobuf:"fixed64,10,opt,name=low,proto3" json:"low,omitempty"`
	MarketVolumes []*MarketVolume `protobuf:"bytes,11,rep,name=marketVolumes,proto3" json:"marketVolumes,omitempty"`
	Asks          []*Tick         `protobuf:"bytes,12,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids          []*Tick         `protobuf:"bytes,13,rep,name=bids,proto3" json:"bids,omitempty"`
	Chart         *MarketChart    `protobuf:"bytes,14,opt,name=chart,proto3" json:"chart,omitempty"`
	Last          *MarketLast     `protobuf:"bytes,15,opt,name=last,proto3" json:"last,omitempty"`
	Tick          float64         `protobuf:"fixed64,16,opt,name=tick,proto3" json:"tick,omitempty"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{14}
}

func (x *Market) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Market) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *Market) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *Market) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Market) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Market) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Market) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *Market) GetChangeRate() float64 {
	if x != nil {
		return x.ChangeRate
	}
	return 0
}

func (x *Market) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Market) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Market) GetMarketVolumes() []*MarketVolume {
	if x != nil {
		return x.MarketVolumes
	}
	return nil
}

func (x *Market) GetAsks() []*Tick {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *Market) GetBids() []*Tick {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *Market) GetChart() *MarketChart {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *Market) GetLast() *MarketLast {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *Market) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

type MarketVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  float64 `protobuf:"fixed64,1,opt,name=base,proto3" json:"base,omitempty"`
	Quote float64 `protobuf:"fixed64,2,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *MarketVolume) Reset() {
	*x = MarketVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketVolume) ProtoMessage() {}

func (x *MarketVolume) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketVolume.ProtoReflect.Descriptor instead.
func (*MarketVolume) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{15}
}

func (x *MarketVolume) GetBase() float64 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *MarketVolume) GetQuote() float64 {
	if x != nil {
		return x.Quote
	}
	return 0
}

type Tick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price   float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Balance float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *Tick) Reset() {
	*x = Tick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{16}
}

func (x *Tick) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Tick) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type MarketChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price  []*MarketChartPrice  `protobuf:"bytes,1,rep,name=price,proto3" json:"price,omitempty"`
	Volume []*MarketChartVolume `protobuf:"bytes,2,rep,name=volume,proto3" json:"volume,omitempty"`
}

func (x *MarketChart) Reset() {
	*x = MarketChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketChart) ProtoMessage() {}

func (x *MarketChart) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketChart.ProtoReflect.Descriptor instead.
func (*MarketChart) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{17}
}

func (x *MarketChart) GetPrice() []*MarketChartPrice {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *MarketChart) GetVolume() []*MarketChartVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type MarketChartPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Open  int64 `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	High  int64 `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
	Low   int64 `protobuf:"varint,4,opt,name=low,proto3" json:"low,omitempty"`
	Close int64 `protobuf:"varint,5,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *MarketChartPrice) Reset() {
	*x = MarketChartPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketChartPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketChartPrice) ProtoMessage() {}

func (x *MarketChartPrice) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketChartPrice.ProtoReflect.Descriptor instead.
func (*MarketChartPrice) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{18}
}

func (x *MarketChartPrice) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MarketChartPrice) GetOpen() int64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *MarketChartPrice) GetHigh() int64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *MarketChartPrice) GetLow() int64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *MarketChartPrice) GetClose() int64 {
	if x != nil {
		return x.Close
	}
	return 0
}

type MarketChartVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64              `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Value int64              `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  ExchangeVolumeType `protobuf:"varint,3,opt,name=type,proto3,enum=grpcmodule.ExchangeVolumeType" json:"type,omitempty"`
}

func (x *MarketChartVolume) Reset() {
	*x = MarketChartVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketChartVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketChartVolume) ProtoMessage() {}

func (x *MarketChartVolume) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketChartVolume.ProtoReflect.Descriptor instead.
func (*MarketChartVolume) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{19}
}

func (x *MarketChartVolume) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MarketChartVolume) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MarketChartVolume) GetType() ExchangeVolumeType {
	if x != nil {
		return x.Type
	}
	return ExchangeVolumeType_BUY
}

type MarketLast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asks   []*Tick         `protobuf:"bytes,1,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids   []*Tick         `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	Chart  *MarketChart    `protobuf:"bytes,3,opt,name=chart,proto3" json:"chart,omitempty"`
	Volume []*MarketVolume `protobuf:"bytes,4,rep,name=volume,proto3" json:"volume,omitempty"`
}

func (x *MarketLast) Reset() {
	*x = MarketLast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketLast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketLast) ProtoMessage() {}

func (x *MarketLast) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketLast.ProtoReflect.Descriptor instead.
func (*MarketLast) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{20}
}

func (x *MarketLast) GetAsks() []*Tick {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *MarketLast) GetBids() []*Tick {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *MarketLast) GetChart() *MarketChart {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *MarketLast) GetVolume() []*MarketVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type ExhchangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ExhchangeResponse) Reset() {
	*x = ExhchangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExhchangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExhchangeResponse) ProtoMessage() {}

func (x *ExhchangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExhchangeResponse.ProtoReflect.Descriptor instead.
func (*ExhchangeResponse) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{21}
}

func (x *ExhchangeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// ====================================
// AddVault
// ====================================
type VaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Vault `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *VaultRequest) Reset() {
	*x = VaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultRequest) ProtoMessage() {}

func (x *VaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultRequest.ProtoReflect.Descriptor instead.
func (*VaultRequest) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{22}
}

func (x *VaultRequest) GetData() *Vault {
	if x != nil {
		return x.Data
	}
	return nil
}

type Vault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId int64        `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Vaults  []*VaultData `protobuf:"bytes,2,rep,name=vaults,proto3" json:"vaults,omitempty"`
}

func (x *Vault) Reset() {
	*x = Vault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vault) ProtoMessage() {}

func (x *Vault) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vault.ProtoReflect.Descriptor instead.
func (*Vault) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{23}
}

func (x *Vault) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Vault) GetVaults() []*VaultData {
	if x != nil {
		return x.Vaults
	}
	return nil
}

type VaultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                   bool        `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Address               string      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Symbol                string      `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name                  string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Decimals              int64       `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Exchange              float64     `protobuf:"fixed64,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	ExchageChange_24H     float64     `protobuf:"fixed64,7,opt,name=exchage_change_24h,json=exchageChange24h,proto3" json:"exchage_change_24h,omitempty"`
	ExchageChangeRate_24H float64     `protobuf:"fixed64,8,opt,name=exchage_change_rate_24h,json=exchageChangeRate24h,proto3" json:"exchage_change_rate_24h,omitempty"`
	Tl                    float64     `protobuf:"fixed64,9,opt,name=tl,proto3" json:"tl,omitempty"`
	TlChange              float64     `protobuf:"fixed64,10,opt,name=tl_change,json=tlChange,proto3" json:"tl_change,omitempty"`
	Tvl                   float64     `protobuf:"fixed64,11,opt,name=tvl,proto3" json:"tvl,omitempty"`
	TvlChange             float64     `protobuf:"fixed64,12,opt,name=tvl_change,json=tvlChange,proto3" json:"tvl_change,omitempty"`
	Weight                float64     `protobuf:"fixed64,13,opt,name=weight,proto3" json:"weight,omitempty"`
	WeightChange          float64     `protobuf:"fixed64,14,opt,name=weight_change,json=weightChange,proto3" json:"weight_change,omitempty"`
	Deposit               float64     `protobuf:"fixed64,15,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Deposit_24H           float64     `protobuf:"fixed64,16,opt,name=deposit_24h,json=deposit24h,proto3" json:"deposit_24h,omitempty"`
	Withdraw              float64     `protobuf:"fixed64,17,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	Withdraw_24H          float64     `protobuf:"fixed64,18,opt,name=withdraw_24h,json=withdraw24h,proto3" json:"withdraw_24h,omitempty"`
	PerToken              float64     `protobuf:"fixed64,19,opt,name=per_token,json=perToken,proto3" json:"per_token,omitempty"`
	TokenPer              float64     `protobuf:"fixed64,20,opt,name=token_per,json=tokenPer,proto3" json:"token_per,omitempty"`
	Mint                  float64     `protobuf:"fixed64,21,opt,name=mint,proto3" json:"mint,omitempty"`
	Burn                  float64     `protobuf:"fixed64,22,opt,name=burn,proto3" json:"burn,omitempty"`
	Chart                 *VaultChart `protobuf:"bytes,23,opt,name=chart,proto3" json:"chart,omitempty"`
}

func (x *VaultData) Reset() {
	*x = VaultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultData) ProtoMessage() {}

func (x *VaultData) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultData.ProtoReflect.Descriptor instead.
func (*VaultData) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{24}
}

func (x *VaultData) GetKey() bool {
	if x != nil {
		return x.Key
	}
	return false
}

func (x *VaultData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VaultData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *VaultData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultData) GetDecimals() int64 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *VaultData) GetExchange() float64 {
	if x != nil {
		return x.Exchange
	}
	return 0
}

func (x *VaultData) GetExchageChange_24H() float64 {
	if x != nil {
		return x.ExchageChange_24H
	}
	return 0
}

func (x *VaultData) GetExchageChangeRate_24H() float64 {
	if x != nil {
		return x.ExchageChangeRate_24H
	}
	return 0
}

func (x *VaultData) GetTl() float64 {
	if x != nil {
		return x.Tl
	}
	return 0
}

func (x *VaultData) GetTlChange() float64 {
	if x != nil {
		return x.TlChange
	}
	return 0
}

func (x *VaultData) GetTvl() float64 {
	if x != nil {
		return x.Tvl
	}
	return 0
}

func (x *VaultData) GetTvlChange() float64 {
	if x != nil {
		return x.TvlChange
	}
	return 0
}

func (x *VaultData) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *VaultData) GetWeightChange() float64 {
	if x != nil {
		return x.WeightChange
	}
	return 0
}

func (x *VaultData) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *VaultData) GetDeposit_24H() float64 {
	if x != nil {
		return x.Deposit_24H
	}
	return 0
}

func (x *VaultData) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *VaultData) GetWithdraw_24H() float64 {
	if x != nil {
		return x.Withdraw_24H
	}
	return 0
}

func (x *VaultData) GetPerToken() float64 {
	if x != nil {
		return x.PerToken
	}
	return 0
}

func (x *VaultData) GetTokenPer() float64 {
	if x != nil {
		return x.TokenPer
	}
	return 0
}

func (x *VaultData) GetMint() float64 {
	if x != nil {
		return x.Mint
	}
	return 0
}

func (x *VaultData) GetBurn() float64 {
	if x != nil {
		return x.Burn
	}
	return 0
}

func (x *VaultData) GetChart() *VaultChart {
	if x != nil {
		return x.Chart
	}
	return nil
}

type VaultChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate   []*VaultChartRate  `protobuf:"bytes,1,rep,name=rate,proto3" json:"rate,omitempty"`
	Locked []*VaultChartLock  `protobuf:"bytes,2,rep,name=locked,proto3" json:"locked,omitempty"`
	Value  []*VaultChartValue `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *VaultChart) Reset() {
	*x = VaultChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultChart) ProtoMessage() {}

func (x *VaultChart) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultChart.ProtoReflect.Descriptor instead.
func (*VaultChart) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{25}
}

func (x *VaultChart) GetRate() []*VaultChartRate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *VaultChart) GetLocked() []*VaultChartLock {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (x *VaultChart) GetValue() []*VaultChartValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type VaultChartRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   string  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Open   float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	High   float64 `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Low    float64 `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`
	Close  float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	Volume int64   `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *VaultChartRate) Reset() {
	*x = VaultChartRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultChartRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultChartRate) ProtoMessage() {}

func (x *VaultChartRate) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultChartRate.ProtoReflect.Descriptor instead.
func (*VaultChartRate) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{26}
}

func (x *VaultChartRate) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *VaultChartRate) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *VaultChartRate) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *VaultChartRate) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *VaultChartRate) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *VaultChartRate) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type VaultRecent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  VaultVolumeType `protobuf:"varint,1,opt,name=type,proto3,enum=grpcmodule.VaultVolumeType" json:"type,omitempty"`
	Time  string          `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Value float64         `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Share float64         `protobuf:"fixed64,4,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *VaultRecent) Reset() {
	*x = VaultRecent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultRecent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultRecent) ProtoMessage() {}

func (x *VaultRecent) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultRecent.ProtoReflect.Descriptor instead.
func (*VaultRecent) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{27}
}

func (x *VaultRecent) GetType() VaultVolumeType {
	if x != nil {
		return x.Type
	}
	return VaultVolumeType_DEPOSIT
}

func (x *VaultRecent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *VaultRecent) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *VaultRecent) GetShare() float64 {
	if x != nil {
		return x.Share
	}
	return 0
}

type VaultChartLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  string  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VaultChartLock) Reset() {
	*x = VaultChartLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultChartLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultChartLock) ProtoMessage() {}

func (x *VaultChartLock) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultChartLock.ProtoReflect.Descriptor instead.
func (*VaultChartLock) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{28}
}

func (x *VaultChartLock) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *VaultChartLock) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type VaultChartValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VaultChartValue) Reset() {
	*x = VaultChartValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultChartValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultChartValue) ProtoMessage() {}

func (x *VaultChartValue) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultChartValue.ProtoReflect.Descriptor instead.
func (*VaultChartValue) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{29}
}

func (x *VaultChartValue) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *VaultChartValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type VaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *VaultResponse) Reset() {
	*x = VaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinmeca_grpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultResponse) ProtoMessage() {}

func (x *VaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinmeca_grpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultResponse.ProtoReflect.Descriptor instead.
func (*VaultResponse) Descriptor() ([]byte, []int) {
	return file_coinmeca_grpc_proto_rawDescGZIP(), []int{30}
}

func (x *VaultResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_coinmeca_grpc_proto protoreflect.FileDescriptor

var file_coinmeca_grpc_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x69, 0x6e, 0x6d, 0x65, 0x63, 0x61, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0xfb, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x61, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x66, 0x61, 0x72, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xa7, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x47, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x61, 0x74, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x0b, 0x46, 0x61,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x78, 0x0a, 0x04, 0x46, 0x61, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x72,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x22, 0x89, 0x05, 0x0a, 0x08, 0x46, 0x61,
	0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x76, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x76, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x76, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x76, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x32,
	0x34, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x32, 0x34, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x32, 0x34, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x32, 0x34, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x32, 0x34, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x32, 0x34, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x34, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x32, 0x34, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x32, 0x34, 0x68, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x32, 0x34, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x34, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x6f, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x6f, 0x69, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x22, 0x6c, 0x0a, 0x09, 0x46, 0x61, 0x72, 0x6d, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x72,
	0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x50, 0x52, 0x52, 0x03, 0x61, 0x70, 0x72, 0x12, 0x33,
	0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x72, 0x6d,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x46, 0x61, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x41, 0x50, 0x52, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a,
	0x0f, 0x46, 0x61, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x46, 0x61,
	0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x3c, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x78, 0x68, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x51, 0x0a, 0x09, 0x45, 0x78, 0x68, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0xe8, 0x03, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x62,
	0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x04, 0x62, 0x69, 0x64,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b,
	0x22, 0x38, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x04, 0x54, 0x69,
	0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x78, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x10,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x04,
	0x62, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x04, 0x62, 0x69,
	0x64, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x12, 0x30, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x11, 0x45, 0x78, 0x68, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x35, 0x0a, 0x0c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x05, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa5, 0x05, 0x0a, 0x09,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x32, 0x34, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x32,
	0x34, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x32, 0x34, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x74, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x76, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x76, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x76, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x76, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x32,
	0x34, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x32, 0x34, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x32, 0x34, 0x68,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x32, 0x34, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x72, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x62, 0x75, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x0b, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x29, 0x0a, 0x0d, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x27, 0x0a, 0x12,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x2c, 0x0a, 0x0f, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x10, 0x01, 0x32, 0x5a, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x6d, 0x65, 0x63, 0x61, 0x47,
	0x72, 0x70, 0x63, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinmeca_grpc_proto_rawDescOnce sync.Once
	file_coinmeca_grpc_proto_rawDescData = file_coinmeca_grpc_proto_rawDesc
)

func file_coinmeca_grpc_proto_rawDescGZIP() []byte {
	file_coinmeca_grpc_proto_rawDescOnce.Do(func() {
		file_coinmeca_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinmeca_grpc_proto_rawDescData)
	})
	return file_coinmeca_grpc_proto_rawDescData
}

var file_coinmeca_grpc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_coinmeca_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_coinmeca_grpc_proto_goTypes = []interface{}{
	(ExchangeVolumeType)(0),     // 0: grpcmodule.ExchangeVolumeType
	(VaultVolumeType)(0),        // 1: grpcmodule.VaultVolumeType
	(*GeneralRequest)(nil),      // 2: grpcmodule.GeneralRequest
	(*GeneralResponse)(nil),     // 3: grpcmodule.GeneralResponse
	(*TransactionRequest)(nil),  // 4: grpcmodule.TransactionRequest
	(*Transaction)(nil),         // 5: grpcmodule.Transaction
	(*TransactionResponse)(nil), // 6: grpcmodule.TransactionResponse
	(*FarmRequest)(nil),         // 7: grpcmodule.FarmRequest
	(*Farm)(nil),                // 8: grpcmodule.Farm
	(*FarmData)(nil),            // 9: grpcmodule.FarmData
	(*FarmChart)(nil),           // 10: grpcmodule.FarmChart
	(*FarmChartAPR)(nil),        // 11: grpcmodule.FarmChartAPR
	(*FarmChartLocked)(nil),     // 12: grpcmodule.FarmChartLocked
	(*FarmResponse)(nil),        // 13: grpcmodule.FarmResponse
	(*ExchangeRequest)(nil),     // 14: grpcmodule.ExchangeRequest
	(*Exhchange)(nil),           // 15: grpcmodule.Exhchange
	(*Market)(nil),              // 16: grpcmodule.Market
	(*MarketVolume)(nil),        // 17: grpcmodule.MarketVolume
	(*Tick)(nil),                // 18: grpcmodule.Tick
	(*MarketChart)(nil),         // 19: grpcmodule.MarketChart
	(*MarketChartPrice)(nil),    // 20: grpcmodule.MarketChartPrice
	(*MarketChartVolume)(nil),   // 21: grpcmodule.MarketChartVolume
	(*MarketLast)(nil),          // 22: grpcmodule.MarketLast
	(*ExhchangeResponse)(nil),   // 23: grpcmodule.ExhchangeResponse
	(*VaultRequest)(nil),        // 24: grpcmodule.VaultRequest
	(*Vault)(nil),               // 25: grpcmodule.Vault
	(*VaultData)(nil),           // 26: grpcmodule.VaultData
	(*VaultChart)(nil),          // 27: grpcmodule.VaultChart
	(*VaultChartRate)(nil),      // 28: grpcmodule.VaultChartRate
	(*VaultRecent)(nil),         // 29: grpcmodule.VaultRecent
	(*VaultChartLock)(nil),      // 30: grpcmodule.VaultChartLock
	(*VaultChartValue)(nil),     // 31: grpcmodule.VaultChartValue
	(*VaultResponse)(nil),       // 32: grpcmodule.VaultResponse
}
var file_coinmeca_grpc_proto_depIdxs = []int32{
	4,  // 0: grpcmodule.GeneralRequest.transaction:type_name -> grpcmodule.TransactionRequest
	7,  // 1: grpcmodule.GeneralRequest.farm:type_name -> grpcmodule.FarmRequest
	14, // 2: grpcmodule.GeneralRequest.exchange:type_name -> grpcmodule.ExchangeRequest
	24, // 3: grpcmodule.GeneralRequest.vault:type_name -> grpcmodule.VaultRequest
	5,  // 4: grpcmodule.TransactionRequest.data:type_name -> grpcmodule.Transaction
	8,  // 5: grpcmodule.FarmRequest.data:type_name -> grpcmodule.Farm
	9,  // 6: grpcmodule.Farm.main:type_name -> grpcmodule.FarmData
	9,  // 7: grpcmodule.Farm.derive:type_name -> grpcmodule.FarmData
	10, // 8: grpcmodule.FarmData.chart:type_name -> grpcmodule.FarmChart
	11, // 9: grpcmodule.FarmChart.apr:type_name -> grpcmodule.FarmChartAPR
	12, // 10: grpcmodule.FarmChart.locked:type_name -> grpcmodule.FarmChartLocked
	15, // 11: grpcmodule.ExchangeRequest.data:type_name -> grpcmodule.Exhchange
	16, // 12: grpcmodule.Exhchange.market:type_name -> grpcmodule.Market
	17, // 13: grpcmodule.Market.marketVolumes:type_name -> grpcmodule.MarketVolume
	18, // 14: grpcmodule.Market.asks:type_name -> grpcmodule.Tick
	18, // 15: grpcmodule.Market.bids:type_name -> grpcmodule.Tick
	19, // 16: grpcmodule.Market.chart:type_name -> grpcmodule.MarketChart
	22, // 17: grpcmodule.Market.last:type_name -> grpcmodule.MarketLast
	20, // 18: grpcmodule.MarketChart.price:type_name -> grpcmodule.MarketChartPrice
	21, // 19: grpcmodule.MarketChart.volume:type_name -> grpcmodule.MarketChartVolume
	0,  // 20: grpcmodule.MarketChartVolume.type:type_name -> grpcmodule.ExchangeVolumeType
	18, // 21: grpcmodule.MarketLast.asks:type_name -> grpcmodule.Tick
	18, // 22: grpcmodule.MarketLast.bids:type_name -> grpcmodule.Tick
	19, // 23: grpcmodule.MarketLast.chart:type_name -> grpcmodule.MarketChart
	17, // 24: grpcmodule.MarketLast.volume:type_name -> grpcmodule.MarketVolume
	25, // 25: grpcmodule.VaultRequest.data:type_name -> grpcmodule.Vault
	26, // 26: grpcmodule.Vault.vaults:type_name -> grpcmodule.VaultData
	27, // 27: grpcmodule.VaultData.chart:type_name -> grpcmodule.VaultChart
	28, // 28: grpcmodule.VaultChart.rate:type_name -> grpcmodule.VaultChartRate
	30, // 29: grpcmodule.VaultChart.locked:type_name -> grpcmodule.VaultChartLock
	31, // 30: grpcmodule.VaultChart.value:type_name -> grpcmodule.VaultChartValue
	1,  // 31: grpcmodule.VaultRecent.type:type_name -> grpcmodule.VaultVolumeType
	2,  // 32: grpcmodule.CoinmecaGrpcModule.AddData:input_type -> grpcmodule.GeneralRequest
	3,  // 33: grpcmodule.CoinmecaGrpcModule.AddData:output_type -> grpcmodule.GeneralResponse
	33, // [33:34] is the sub-list for method output_type
	32, // [32:33] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_coinmeca_grpc_proto_init() }
func file_coinmeca_grpc_proto_init() {
	if File_coinmeca_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinmeca_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Farm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmChartAPR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmChartLocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exhchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketChartPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketChartVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketLast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExhchangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultChartRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultRecent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultChartLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultChartValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinmeca_grpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinmeca_grpc_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GeneralRequest_Transaction)(nil),
		(*GeneralRequest_Farm)(nil),
		(*GeneralRequest_Exchange)(nil),
		(*GeneralRequest_Vault)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinmeca_grpc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coinmeca_grpc_proto_goTypes,
		DependencyIndexes: file_coinmeca_grpc_proto_depIdxs,
		EnumInfos:         file_coinmeca_grpc_proto_enumTypes,
		MessageInfos:      file_coinmeca_grpc_proto_msgTypes,
	}.Build()
	File_coinmeca_grpc_proto = out.File
	file_coinmeca_grpc_proto_rawDesc = nil
	file_coinmeca_grpc_proto_goTypes = nil
	file_coinmeca_grpc_proto_depIdxs = nil
}
